import socket
import odrive

def connect_to_odrive():
    print("Finding odrive")
    try:
        odrv = odrive.find_any()
        if odrv is None:
            print("ODrive not found. Exiting program.")
            exit()
        print("ODrive connected successfully.")
        return odrv
    except Exception as e:
        print("Error connecting to ODrive:", e)
        exit()

# Connect to ODrive
odrv0 = connect_to_odrive()

def server_program():
    host = ''  # Accept connections from any IP address
    port = 5000  # Port to listen on

    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((host, port))
    server_socket.listen(1)  # Accept only one connection for simplicity

    print("Waiting for connection from ESP32...")
    conn, address = server_socket.accept()  # Accept new connection
    print("Connection from:", address)

    try:
        while True:
            # Receive data
            data = conn.recv(1024).decode()
            if not data:
                break
            print("Received from ESP32:", data)

            if data == "depart":
                print("Starting motor")
                # odrv0.axis0.requested_state = 8  # Activate ODrive axis 0
                # odrv0.axis1.requested_state = 8  # Activate ODrive axis 1
                            
            elif data == "arrive":
                print("Stopping motor...")
                # odrv0.axis0.requested_state = 3  # Set ODrive axis 0 to idle
                # odrv0.axis1.requested_state = 3  # Set ODrive axis 1 to idle
            
            elif 'turn' in data.lower():
                print("Moving forward...")
                
                # odrv0.axis1.controller.input_pos += 0.5
                # odrv0.axis0.controller.input_pos -= 0.5
            # elif data == "backward":
            #    print("Moving backward...")
            #     odrv0.axis1.controller.input_pos -= 0.1
            #     odrv0.axis0.controller.input_pos += 0.1
                
            # Send response
            response = "Hello from Jetson"
            conn.send(response.encode())
    except Exception as e:
        print("Error:", e)
    finally:
        conn.close()  # Close the connection

if __name__ == '__main__':
    server_program()
